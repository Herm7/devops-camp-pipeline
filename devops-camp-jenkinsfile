pipeline {
  agent {
    label 'jenkins-agent'
  }
  environment{
  PIPELINE_HASH=sh(script:'gitrev-parse--shortHEAD',returnStdout:true).trim()
  HARBOR_REGISTRY='harbor.dev.afsmtddso.com'
  HARBOR_PROJECT='harteaga-devsecops'
  APP_IMAGE_NAME='app'
  DB_IMAGE_NAME='db'
  }
  stages {
    stage('Application repository') {
      steps {
        echo "Cloning application repository"
        sh 'git clone https://github.com/Herm7/afs-labs-student.git'
		dir('afs-labs-student') {
		script{
		env.APP_HASH = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
		}
	}
   }
  }
    stage('Application docker build') {
      steps {
        echo "Building application image"
		withCredentials([usernameColonPassword(credentialsId: 'harteaga-harbor-auth',variable:'HARBOR-AUTH')]){
			script{
				docker.build('$APP_IMAGE_NAME-$APP_HASH','-f./app/Dockerfile./afs-labs-student')
				docker.withRegistry('https://$HARBOR_REGISTRY','harteaga-harbor-auth'){
					sh'dockertag$APP_IMAGE_NAME-$APP_HASH$HARBOR_REGISTRY/$HARBOR_PROJECT/$APP_IMAGE_NAME:$APP_HASH-$PIPELINE_HASH'
					sh'dockerpush$HARBOR_REGISTRY/$HARBOR_PROJECT/$APP_IMAGE_NAME:$APP_HASH-$PIPELINE_HASH'
				}
			}
		}
      }
	  post{
		always{
			echo"Cleanlocal$APP_IMAGE_NAMEimage"
				script{
					try{
						sh'dockerrmi$APP_IMAGE_NAME-$APP_HASH:latest'
						sh'dockerrmi$HARBOR_REGISTRY/$HARBOR_PROJECT/$APP_IMAGE_NAME:$APP_HASH-
						$PIPELINE_HASH'
						}
						catch(err){
						echoerr.getMessage()
						}
					}
				}
			}
	  
	  stage('Database docker build') {
		steps {
		withCredentials([usernameColonPassword(credentialsId: 'harteaga-harbor-auth,variable:'HARBOR-AUTH')]){
			script{
				docker.build('$DB_IMAGE_NAME-$APP_HASH','-f./db/Dockerfile./afs-labs-student')
				docker.withRegistry('https://$HARBOR_REGISTRY','harteaga-harbor-auth'){
					sh'dockertag$APP_IMAGE_NAME-
				$APP_HASH$HARBOR_REGISTRY/$HARBOR_PROJECT/$DB_IMAGE_NAME:$APP_HASH-$PIPELINE_HASH'
					sh'dockerpush$HARBOR_REGISTRY/$HARBOR_PROJECT/$APP_IMAGE_NAME:$APP_HASH-
					$PIPELINE_HASH'
				}
			}
		}
		}
		 post{
		always{
			echo"Cleanlocal$APP_IMAGE_NAMEimage"
				script{
					try{
						sh'dockerrmi$DB_IMAGE_NAME-$APP_HASH:latest'
						sh'dockerrmi$HARBOR_REGISTRY/$HARBOR_PROJECT/$DB_IMAGE_NAME:$APP_HASH-
						$PIPELINE_HASH'
						}
						catch(err){
						echoerr.getMessage()
						}
					}
				}
			}
		}
    }
    stage('Test') {
      steps {
        echo "Testing stage"
      }
    }
    stage('Deploy') {
      steps {
        echo "Deployment stage"
      }
    }
  }
  post {
    cleanup {
      echo "Clean workspace"
      sh 'docker system prune -f'
      sh 'rm -rf .git ./*'
    }
  }
}